let(react require("react"))
let(reactDom require("react-dom"))

// app state

let(createAppState fn(initialState {{
  :state or(initialState {})
  :listenners []
  :__ethReAppState true
}}))

let(isAppState fn(state and(isOfType(:object state) state.__ethReAppState)))

let(appStateSubscribe fn(appState f
  assoc(:listenners append(f appState.listenners) appState)
))

let(appStateNotify fn(appState
  forEach(fn(l l(appState)) appState.listenners)
))

let(appStateSet fn(appState path value {
  set(appState.state setIn(path value appState.state))
  appStateNotify(appState)
}))


let(appStateUpdate fn(appState path updater {
  set(appState.state updateIn(path updater appState.state))
  appStateNotify(appState)
}))


// react

let(isElementSpec fn(e
  and(isOfType(:array e) >(length(e) 0))
))

let(createElement fn(children {
  assert(isElementSpec(children) string("re: createElement: 'children' must be and element spec, got: " toJson(children)))

  let(tagOrComponent children.0)
  let(haveProps isOfType(:object children.1))
  let(properties if(haveProps children.1 {}))
  let(transformedChildren map(
    fn(c if(isElementSpec(c) createElement(c) c))
    children.slice(if(haveProps 2 1))
  ))

  apply(react.createElement concat([tagOrComponent properties] transformedChildren))
}))

// defined a new react component from the given spec
let(createComponent fn(definition {
  // support functional components
  if(isOfType(:function definition) {
    set(definition {:render definition})
  })

  assert(isOfType(:function definition.render) "re: createComponent: component spec needs a render method")

  react.createClass(merge(definition {
    :contextTypes merge(or(definition.contextTypes {}) {
      :appState react.PropTypes.object.isRequired
    })
    :displayName or(definition.displayName definition.name "Component")
    :getInitialState if(isOfType(:function definition.initialState)
      definition.initialState
      fn(or(definition.initialState {})))
    :render fn(createElement(definition.render(this.context.appState this.props this.state this)))
  }))
}))

let(connect fn(appState el {
  let(AppStateProvider createComponent({
    :childContextTypes {:appState react.PropTypes.object.isRequired}
    :getChildContext fn({
      {:appState appState}
    })
    :render fn({
      el
    })
  }))
  AppStateProvider
}))

// mounts a root element to a given DOM element and starts listenning for state changes
let(mount fn(rootEl mountPoint appState {
  assert(isAppState(appState) "re: mount: called without a valid 'appState'")

  // define the root rerender method that will be called on state updates
  let(renderRoot fn(reactDom.render(react.createElement(connect(appState rootEl)) mountPoint)))

  // listen for app state updates
  appStateSubscribe(appState renderRoot)

  // make an initial render
  renderRoot()
}))

set(module.exports {
  :createAppState createAppState
  :appStateSubscribe appStateSubscribe
  :appStateNotify appStateNotify
  :appStateSet appStateSet
  :appStateUpdate appStateUpdate
  :isElementSpec isElementSpec
  :createElement createElement
  :createComponent createComponent
  :mount mount
})
