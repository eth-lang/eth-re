(package eth/re ()

(import eth/core (..))
(import react)
(import react-dom)

; app
(def create-app (initial-state render)
  (let ((app-state {state (or initial-state {})}))
    (set app-state.renderer renderer)
    (rerender)
    app-state))

(def set! (app-state path value)
  (set app-state.state (set-in app-state.state path value))
  (app-state.renderer))

(def update! (app-state path updater)
  ())

(def create-component (definition)
  ; if `defaultState` if provided, create a `getInitialState` for it
  (if definition.defaultState
    (set definition.getInitialState (fn () definition.defaultState))
    ())

  (if definition.defaultProps
    (set definition.getDefaultProps (fn () definition.defaultProps))
    ())

  (var given-render definition.render)
  (set definition.render (fn ()
    (given-render.call @ @props @state)))

  (if definition.name
    (set definition.displayName definition.name)
    ())

  (React.createClass definition))

; react interface
(def el (tag-name props ... children)
  (apply react.create-element (concat [tag-name props] children)))

(def el (tag-name props ... children)
  (apply react.create-element (concat [tag-name props] children)))

(def render (root-el mount-point app-state)
  (create-app app-state (fn ()
    (react-dom rool-el mount-point))))

(set html-tags [
  ; HTML
  "a" "abbr" "address" "area" "article" "aside" "audio" "b" "base" "bdi" "bdo" "big" "blockquote"
  "body" "br" "button" "canvas" "caption" "cite" "code" "col" "colgroup" "data" "datalist" "dd"
  "del" "details" "dfn" "dialog" "div" "dl" "dt" "em" "embed" "fieldset" "figcaption" "figure"
  "footer" "form" "h1" "h2" "h3" "h4" "h5" "h6" "head" "header" "hgroup" "hr" "html" "i" "iframe"
  "img" "input" "ins" "kbd" "keygen" "label" "legend" "li" "link" "main" "map" "mark" "menu"
  "menuitem" "meta" "meter" "nav" "noscript" "object" "ol" "optgroup" "option" "output" "p" "param"
  "picture" "pre" "progress" "q" "rp" "rt" "ruby" "s" "samp" "script" "section" "select" "small"
  "source" "span" "strong" "style" "sub" "summary" "sup" "table" "tbody" "td" "textarea" "tfoot"
  "th" "thead" "time" "title" "tr" "track" "u" "ul" "var" "video" "wbr"

  ; SVG
  "circle" "clipPath" "defs" "ellipse" "g" "image" "line" "linearGradient" "mask" "path" "pattern"
  "polygon" "polyline" "radialGradient" "rect" "stop" "svg" "text" "tspan"
  ])

(for-each (fn (tag) (export tag (curry el tag))) html-tags)
)
